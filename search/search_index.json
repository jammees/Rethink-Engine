{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"2D gamesFramework supportOpen sourceGames that use Rethink","text":"Rethink Engine Versatile, easy-to-use 2D game engine. <p>Installation Documentation</p> <p>Ever thought about making a 2D game with UI elements? But stepped back, because ROBLOX does not provide any tools to do so?       Well, Rethink might be the engine for you!</p> <p>Rethink comes with a plugin and a wild variety of tools ready-to-use for developers!</p> <p>Would you like to use Rethink, but you don't have that functionality that you like in a framework you use?</p> <p>Do not worry, because Rethink does not limit where and how you can use the tools, it is possible to pair Rethink with frameworks of your choice!</p> <p>Rethink will always be open sourced and free-to-use!</p> <p>Contributions to the engine are always welcome! In case of bug(s) found in the engine or would like to request a new feature, please create an issue with the right template!</p> <p>Information about the games pinned here</p> <p>If you would like to see your game pinned here, please create an issue with the topic of \"pin game to website\"</p> <p>Requirements:</p> <ul> <li>Must provide proof that Rethink is used in the game</li> </ul> <p>These requirements in the future might change!</p> <p>If the title, logo or the creator has changed for a game, please create a new issue, because games pinned here do not update automatically!</p> <p> </p>"},{"location":"secret/","title":"Secret","text":"<p>Secrets :)</p> <p> Warning</p> <p> Error</p> <p> Since</p> <p> Parameter</p> <p> Returns</p> <p> Read-Only</p> <p> Default</p> <p> Warning</p> <p> Error</p> <p> Since</p> <p> Parameter</p> <p> Returns</p> <p> Read-Only</p> <p> Default:</p> <p>Example:</p> <p> Warning: Experimental</p> <p> Error: Outdated</p> <p> Since: 0.6.0</p> <p> Parameter: test {boolean}</p> <p> Returns: data {string}</p> <p> Read-Only</p> <p> Default: 5</p>"},{"location":"documentation/3rdpartymodules/","title":"3rd Party Modules","text":"<p>Here are all of the external libraries that Rethink uses:</p> <p></p>"},{"location":"documentation/3rdpartymodules/#nature2d","title":"Nature2D","text":"<p>GitHub</p> <p>Made by: @jaipack17</p> <p><p>Changes</p></p> <p>In Rethink Nature2D is a modified release of currently v0.7.1</p> <p>These changes include some fixes, such fixing canvas not scaling dynamically when the viewport's size changes. Or some compatibility such as not destroying the UI element.</p> <p><p>License</p></p> <p>MIT License</p> <p>Copyright (c) 2021 jaipack17</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p></p>"},{"location":"documentation/3rdpartymodules/#raycast2","title":"RayCast2","text":"<p>GitHub</p> <p>Made by: @jaipack17</p> <p><p>License</p></p> <p>MIT License</p> <p>Copyright (c) 2021 jaipack17</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p> <p></p>"},{"location":"documentation/3rdpartymodules/#guicollisionservice","title":"GuiCollisionService","text":"<p>GitHub</p> <p>Made by: @jaipack17</p> <p><p>Changes</p></p> <p>Fixed <code>.isInCore</code> not working as expected. GuiCollisionService will be used to implement culling into Rethink, to hopefully slice down the amount of UI elements ROBLOX has to render. As well as replacing deprecated variables.</p> <p><p>License</p></p> <p>MIT License</p> <p>Copyright (c) 2021 jaipack17</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"documentation/3rdpartymodules/#janitor","title":"Janitor","text":"<p>GitHub</p> <p>Made by: howmanysmall</p> <p><p>License</p></p> <p>MIT License</p> <p>Copyright (c) 2021 Validark / howmanysmall</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"documentation/3rdpartymodules/#promise","title":"Promise","text":"<p>GitHub</p> <p>Made by: howmanysmall</p> <p><p>License</p></p> <p>MIT License</p> <p>Copyright (c) 2019 Eryn L. K.</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"documentation/3rdpartymodules/#goodsignal","title":"GoodSignal","text":"<p>GitHub</p> <p>Made by: howmanysmall</p> <p><p>License</p></p> <p>MIT License</p> <p>Copyright (c) 2021 Mark Langen</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"documentation/3rdpartymodules/#t","title":"t","text":"<p>GitHub</p> <p>Made by: howmanysmall</p> <p><p>License</p></p> <p>MIT License</p> <p>Copyright (c) 2018 Osyris</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"documentation/animator/","title":"Animator","text":"<p>Animator is a tool, which allows animations to be played from spritesheets or from a collection of images easily.</p>"},{"location":"documentation/animator/#properties","title":"Properties","text":""},{"location":"documentation/animator/#tools","title":"Tools","text":"<p>Tools are utility functions, which aid in defining animation frames. Tools are mainly used in conjuction with Animator:AddSpritesheet()</p> <p>List of all available events</p> <p>Name changes</p> <p>In the upcoming updates, it is possible for the listed tools to change names. Currently the names of these functions do not make sense at all.</p> Name: Description: PopulateRow Fills a table with <code>x</code> amount of ones(1) PopulateColumn Fills <code>x</code> amount of tables with <code>y</code> amount of ones(1) <p></p>"},{"location":"documentation/animator/#class-properties","title":"Class properties","text":"Name: Description: Framerate The framerate of the animation Frame Current frame MaxFrames How many frames are there in the animation CurrentAnimation The current animation's name Running Is animation being played with <code>:Play()</code> Objects Array of attached objects"},{"location":"documentation/animator/#api","title":"API","text":""},{"location":"documentation/animator/#newobjects","title":".new(<code>objects</code>)","text":"<p> Parameter: Objects <code>{ImageLabel | ImageButton}</code></p> <p>Constructs a new Animator class. If <code>objects</code> argument is present it will automatically attach those objects.</p> <p></p>"},{"location":"documentation/animator/#addspritesheetimageid-size-animations","title":":AddSpritesheet(<code>imageId</code>, <code>size</code>, <code>animations</code>)","text":"<p> Parameter: imageId <code>String | Number</code>  Parameter: size <code>Vector2</code>  Parameter: animations <code>{[String]: {{Number}}}</code></p> <p>Adds animations with the help of spritesheets.</p> Example <pre><code>local Animator = require(Rethink.Animator)\nlocal myAnimation = Animator.new()\n\nmyAnimation:AddSpritesheet(SPRITESHEET_ID, ANIMATION_CELL_SIZE, {\n    [\"run\"] = {\n        { 1, 1, 1, 1, 1 },\n    },\n})\n</code></pre> <p>A new animation can be created by adding a new key value paired table. The key of the table should be the name of the animation, and the value should be a set of ones(1) and zeros(0) to indicate, which represent each frame on your spritesheet.</p> <p></p> <p>Steps to create your animation:</p> <ol> <li>Count how many squares are in a row and a column</li> <li>In our animation table create as many tables as rows and inside them as many zeros(0) as columns</li> <li>Replace the zeros(0) with ones(1) which are desired to be the part of the animation</li> </ol> <p> </p> <p>Results:</p> <pre><code>myAnimation:AddSpritesheet(SPRITESHEET_ID, ANIMATION_CELL_SIZE, {\n    [\"rotating_squares\"] = {\n        { 1, 1, 1, 1, 1 },\n        { 1, 0, 0, 0, 0 },\n        { 0, 0, 0, 0, 0 },\n        { 0, 0, 0, 0, 0 },\n        { 0, 0, 0, 0, 0 },\n    },\n})\n</code></pre> <p></p> <p>Tables containing no ones(1) are not required and can be left out. In case the animation is not connected and there is space between them:</p> <ol> <li> <p>Using r</p> <p><code>r</code> is an offset value, which can be inserted into animation tables having gaps in them. When Animator reads and maps out the animations it will use the r's value to offset the frame.</p> <p>Normally this represents the 1st row but since there's an <code>r</code> key Animator will offset it by that amount. In our case this will represent the 3rd row, instead of the 1st row.</p> <pre><code>myAnimation:AddSpritesheet(SPRITESHEET_ID, ANIMATION_CELL_SIZE, {\n    [\"rotating_squares\"] = {\n        { r = 3, 1, 1, 0, 0, 0 },\n    },\n})\n</code></pre> </li> <li> <p>Filling out gaps</p> <p>Filling out the empty gaps with animation tables contaizing zeros(0) work as well. However, for larger spritesheets, using <code>r</code> is the recommended option.</p> <pre><code>myAnimation:AddSpritesheet(SPRITESHEET_ID, ANIMATION_CELL_SIZE, {\n    [\"rotating_squares\"] = {\n        { 0, 0, 0, 0, 0 },\n        { 0, 0, 0, 0, 0 },\n        { 1, 1, 0, 0, 0 },\n    },\n})\n</code></pre> </li> </ol> <p></p>"},{"location":"documentation/animator/#addcollectioncollection","title":":AddCollection(<code>collection</code>)","text":"<p> Parameter: collection <code>{[String]: {String | Number}}</code></p> <p>Adds a collection of images as animations. The structure of the <code>collection</code> table matches the one used in Animator:AddSpritesheet() method. However, instead of tables containing a set of zeros(0) and ones(1) the images' ids are used.</p> Example <pre><code>local Animator = require(Rethink.Animator)\nlocal myAnimation = Animator.new()\n\nmyAnimation:AddCollection({\n    [\"example\"] = {\n        IMAGE_ID_1,\n        IMAGE_ID_2,\n        IMAGE_ID_3\n    },\n})\n</code></pre> <p></p>"},{"location":"documentation/animator/#play","title":":Play()","text":"<p> Returns: Promise <code>Promise</code></p> <p>Plays the selected animation independant from framerate infinitely.</p> <p></p>"},{"location":"documentation/animator/#stop","title":":Stop()","text":"<p>Haults the animation, which was started by Animator:Play()</p> <p></p>"},{"location":"documentation/animator/#setframerateframerate","title":":SetFramerate(<code>framerate</code>)","text":"<p> Parameter: framerate <code>Number</code>  Default: framerate <code>60</code></p> <p>Sets the framerate of the animations, default value is 60 FPS.</p> <p></p>"},{"location":"documentation/animator/#nextframe","title":":NextFrame()","text":"<p>Advances to the next frame in the selected animation.</p> <p></p>"},{"location":"documentation/animator/#previousframe","title":":PreviousFrame()","text":"<p>Advances to the previous frame in the selected animation.</p> <p></p>"},{"location":"documentation/animator/#attachobjectobject","title":":AttachObject(<code>object</code>)","text":"<p> Parameter: object <code>ImageLabel | ImageButton</code></p> <p>Attaches the provided object to Animator, which will display the current animation frame.</p> <p></p>"},{"location":"documentation/animator/#detachobjectobject","title":":DetachObject(<code>object</code>)","text":"<p> Parameter: object <code>ImageLabel | ImageButton</code></p> <p>Detaches the provided obhect from Animator and will no longer display the current animation frame.</p>"},{"location":"documentation/animator/#changeanimationanimationname","title":":ChangeAnimation(<code>animationName</code>)","text":"<p> Parameter: animationName <code>String</code></p> <p>Changes the animation being played. If Animator cannot find the specified animation it will throw an error.</p> <p></p>"},{"location":"documentation/animator/#clearanimationdata","title":":ClearAnimationData()","text":"<p>Clears all the data associated with animations. This includes objects as well.</p> <p></p>"},{"location":"documentation/animator/#getcurrentanimation","title":":GetCurrentAnimation()","text":"<p> Returns: AnimationData <code>{Number}</code></p> <p>Returns the current animation data that Animator uses.</p> <p></p>"},{"location":"documentation/animator/#getcurrentframe","title":":GetCurrentFrame()","text":"<p> Returns: Frame <code>Number</code></p> <p>Returns the current frame the animation is on.</p> <p></p>"},{"location":"documentation/animator/#getframerate","title":":GetFramerate()","text":"<p> Returns: Framerate <code>Number</code></p> <p>Returns the framerate.</p> <p></p>"},{"location":"documentation/animator/#getmaxframes","title":":GetMaxFrames()","text":"<p> Returns: MaxFrame <code>Number</code></p> <p>Returns the maximum frames in the animation.</p> <p></p>"},{"location":"documentation/animator/#getobjects","title":":GetObjects()","text":"<p> Returns: Objects <code>{ImageLabel | ImageButton}</code></p> <p>Returns all of the attached objects.</p> <p></p>"},{"location":"documentation/animator/#destroy","title":":Destroy()","text":"<p>Destroys the current Animator class.</p>"},{"location":"documentation/camera/","title":"Camera","text":"<p>Warning</p> <p>Camera is still in prototyping phase. Due to incompatibility with Nature2D. As of today the use of this tool is higly un-recommended!</p> <p>Thank you for your understanding!</p> <p>Simple camera implementation that supports Nature2D.</p>"},{"location":"documentation/camera/#properties","title":"Properties","text":""},{"location":"documentation/camera/#handlers","title":"Handlers","text":"<p>Handlers are functions which determine the attached object's position. Available handlers:</p> <ul> <li>NonBody</li> <li>AnchoredBody</li> <li>NonAnchoredBody</li> </ul>"},{"location":"documentation/camera/#api","title":"API","text":""},{"location":"documentation/camera/#renderdeltatime","title":".Render(<code>deltaTime</code>)","text":"<p> Parameter: deltaTime <code>Number?</code></p> <p>Updates every attached object's position by using handlers. If deltaTime argument is present, it will use it in the calculations.</p> <p></p>"},{"location":"documentation/camera/#isattachedobject","title":".IsAttached(<code>object</code>)","text":"<p> Parameter: object <code>GuiObject | Rigidbody</code></p> <p>Returns a boolean and tells whether that object is attached or not.</p> <p></p>"},{"location":"documentation/camera/#attachobject","title":".Attach(<code>object</code>)","text":"<p> Parameter: object <code>GuiObject | Rigidbody</code></p> <p>Attaches the object to the camera and the next time Camera.Render is called it's position will get updated as well.</p> <p></p>"},{"location":"documentation/camera/#detachobject","title":".Detach(<code>object</code>)","text":"<p> Parameter: object <code>GuiObject | Rigidbody</code></p> <p>Removes the object from the camera if present.</p> <p></p>"},{"location":"documentation/camera/#setpositionx-y","title":".SetPosition(<code>x</code>, <code>y</code>)","text":"<p> Parameter: x <code>Number</code>  Parameter: y <code>Number</code></p> <p>Sets the position of the projection to the specified x and y coordinates. Takes into account the boundaries set by Camera.SetBoundary.</p> <p></p>"},{"location":"documentation/camera/#start","title":".Start()","text":"<p>Attaches the Camera.Render method to Nature2D.Updated event. Shorthand for doing:</p> <pre><code>game:GetService(\"RunService\").RenderStepped:Connect(function(deltaTime)\n    Rethink.Prototypes.Camera.Render(deltaTime)\nend)\n</code></pre> <p></p>"},{"location":"documentation/camera/#stop","title":".Stop()","text":"<p>Disconnects the <code>.Render</code> connection.</p> <p></p>"},{"location":"documentation/camera/#setboundaryxbounds-ybounds","title":".SetBoundary(<code>XBounds</code>, <code>YBounds</code>)","text":"<p> Parameter: XBounds <code>NumberRange</code>  Parameter: YBounds <code>NumberRange</code></p> <p>Sets a minimum and a maximum boundary that the camera's position cannot surpass.</p>"},{"location":"documentation/outline/","title":"Outline","text":"<p>Outline is a simple utility module that was made to create fake outlines for images/UI elements. Devforum post: Give images strokes, with Outline!</p> <p>Warning</p> <p>Outline does not work with transparent UI elements! All UI elements must have a transparency of 0!</p> <p></p>"},{"location":"documentation/outline/#api","title":"API","text":""},{"location":"documentation/outline/#newconfig","title":".New(<code>config</code>)","text":"<p> Parameter: config <code>Config</code></p> Name Required Default value Description Object yes - Module will use as the clone template Size no 3 How thicc the outline will be Parent no Object Where to parent it Data no DEFAULT_DATA Positional data Sides no 8 For the loop and for the positional data Rotation no 0 How much the module should rotate the outlines Customize no - <code>Color</code> and <code>Gradient(boolean)</code> can be specified DEFAULT_DATA <pre><code>{\n    [1] = { \"-%s\", \"0\" },\n    [2] = { \"-%s\", \"-%s\" },\n    [3] = { \"0\", \"-%s\" },\n    [4] = { \"%s\", \"-%s\" },\n    [5] = { \"0\", \"%s\" },\n    [6] = { \"%s\", \"%s\" },\n    [7] = { \"-%s\", \"%s\" },\n    [8] = { \"%s\", \"0\" },\n}\n</code></pre> <p></p>"},{"location":"documentation/outline/#rebake","title":":Rebake()","text":"<p>Re-renders the outlines again.</p> <p></p>"},{"location":"documentation/outline/#destroy","title":":Destroy()","text":"<p>Destroys the outline class.</p>"},{"location":"documentation/rethink/","title":"Rethink","text":"<p>Danger</p> <p>Version below 0.6.1 automatically sets up everything once the module has been required and returns the modules!</p> <p>This change was introduced to have more control over initialization and to prepare for future support of Rethink's editor.</p>"},{"location":"documentation/rethink/#properties","title":"Properties","text":""},{"location":"documentation/rethink/#self","title":"Self","text":"<p> Since: 0.6.2</p> <p>A reference to the instance itself.</p> <p></p>"},{"location":"documentation/rethink/#isinitialized","title":"IsInitialized","text":"<p> Since: 0.6.2  Read-Only</p> <p>Tells whether Rethink was initialized or not.</p> <p></p>"},{"location":"documentation/rethink/#version","title":"Version","text":"<p> Since: 0.6.2  Read-Only</p> <p>Tells the current version of Rethink.</p>"},{"location":"documentation/rethink/#api","title":"API","text":""},{"location":"documentation/rethink/#init","title":".Init()","text":"<p> Since: 0.6.2  Returns: Rethink <code>Module</code></p> <p>Initializes Rethink. This includes:</p> <ul> <li>Setting up the game UI elements</li> <li>Setting up the physics engine</li> <li>Setting up global variables that can be accessed with <code>Template</code></li> </ul> <p>After Rethink has initialized successfully it's header will get printed into the console. This behaviour can be configured in the <code>Settings</code> file under <code>Settings.Console.LogHeader</code> (true by default)</p> <p></p>"},{"location":"documentation/rethink/#getmodules","title":".GetModules()","text":"<p> Since: 0.6.2  Returns: Modules <code>Dictionary</code></p> <p>Returns the modules. Does not check whether if Rethink is initialized or not!</p> <p>Warning</p> <p>Modules located in the <code>Prototypes</code> table are unstable or unfinished! Using such modules are highly unrecommended due to stability issues!</p> What Rethink returns <ul> <li>Collision <code>module</code></li> <li>Raycast <code>module</code></li> <li>Animator <code>module</code></li> <li>Outline <code>module</code></li> <li>Scene <code>module</code></li> <li>Template <code>module</code></li> <li>Physics <code>module</code></li> <li> <p>Pool <code>module</code></p> </li> <li> <p>Ui <code>table</code></p> <ul> <li>GameFrame <code>frame</code></li> <li>RenderFrame <code>frame</code></li> <li>Viewport <code>frame</code></li> <li>Ui <code>frame</code></li> </ul> </li> <li>Prototypes <code>table</code><ul> <li>Camera <code>module</code></li> </ul> </li> </ul>"},{"location":"documentation/scene/","title":"Scene","text":"<p>Scene is the main part of Rethink, which makes working with Nature2D and in general working with UIs much more simpler and easier. It provides a simple API which can load in dozens of objects if required into the game with ease.</p> <p>Custom Rigidbodies</p> <p>Scene currently does not support the use of custom rigidbodies!</p> <p></p>"},{"location":"documentation/scene/#properties","title":"Properties","text":""},{"location":"documentation/scene/#symbols","title":"Symbols","text":"<p> Since: 0.6.0  Read-Only</p> <p>Danger</p> <p>Symbols must be wrapped with <code>[ ]</code>! Reason is that without the <code>[ ]</code> lua would just treat the index as a simple string and not as a table.</p> <p>Symbols cannot be saved as locals! Reason is that symbols are automatically generated when indexing <code>Scene.Symbols</code> to make every instance of a symbol unique and prevent data loss by overriding another symbol.</p> <p>Symbols are an easy way to add additional extra functionality to an object. This feature was inspired by Fusion. Rethink allows the creation of custom symbols. See: Scene.RegisterCustomSymbol()</p>"},{"location":"documentation/scene/#tag","title":"Tag","text":"<p> Since: 0.6.0  Parameter: Tag(s) <code>String | {String}</code></p> <p>Gives object the specified tag(s) using CollectionService. Can be retrieved using CollectionService or Scene.GetFromTag().</p> Example <pre><code>MyObject = {\n    [Symbols.Tag] = \"Hello world!\"\n}\n</code></pre> <pre><code>local result1 = CollectionService:GetTagged(\"Hello world!\")[1]\nlocal result2 = Rethink.Scene.GetFromTag(\"Hello world!\")[1]\n\nprint(result1 == result2) --&gt; true\n</code></pre> <p>Results in the same object being returned. However, one key difference between CollectionService and GetFromTag is that GetFromTag returns the Rigidbody class whilst CollectionService would have just returned the gui instance (e.g. Frame) itself.</p> <p></p>"},{"location":"documentation/scene/#property","title":"Property","text":"<p> Since: 0.6.0  Parameter: Properties <code>{[String | Symbol]: any}</code></p> <p>Adds properties and symbols to object. Mainly used in containers.</p> Example <pre><code>MyContainer = {\n    [Symbols.Property] = {\n        Name = \"Hello world!\"\n    },\n\n    MyObject = {\n        Name = \"Something totally different!\"\n    }\n}\n</code></pre> <p>From the example above, it is a normal behaviour that MyObject's name property was applied instead of the property symbol's. The reason is the Compiler always prioritizes objects more than containers.</p> <p></p>"},{"location":"documentation/scene/#type","title":"Type","text":"<p> Since: 0.6.0  Parameter: Type <code>String</code></p> <p>Tells the Compiler the type of the object: <code>UiBase</code> or <code>Rigidbody</code>. Type symbols are defined in containers. If not present the Compiler will throw a warning and default to <code>UIBase</code>!</p> Example <pre><code>MyContainer = {\n    [Symbols.Type] = \"Rigidbody\"\n\n    MyObject = {}\n}\n</code></pre> <p></p>"},{"location":"documentation/scene/#event","title":"Event","text":"<p> Since: 0.6.0  Parameter: EventName <code>String</code>  Parameter: Callback <code>(Object) -&gt; ()</code></p> <p>Listens to the given event, firing the provided callback function with the object.</p> Example <pre><code>MyObject = {\n    [Symbols.Event(\"MouseEnter\")] = function(thisObject)\n        print(\"Mouse entered\", thisObject.Name)\n    end,\n}\n</code></pre> <p></p>"},{"location":"documentation/scene/#permanent","title":"Permanent","text":"<p> Since: 0.6.2  Parameter: Predicate <code>Boolean</code></p> <p>Tells Scene if object should get flushed, if value is set to true. Symbol is ignored if ignorePermanent argument is set to true in Scene.Flush().</p> Example <pre><code>MyObject = {\n    [Symbols.Permanent] = true\n}\n</code></pre> <pre><code>Scene.Flush(false)\n</code></pre> <p>From the example above, it can be observed that MyObject has not been flushed, since Permanent was set to true and ignorePermanent was set to false. Resulting in the object  staying in the scene. Leaving ignorePermanent as nil works the same way!</p> <p></p>"},{"location":"documentation/scene/#shouldflush","title":"ShouldFlush","text":"<p> Since: 0.6.0  Parameter: Predicate <code>Boolean</code></p> <p>Danger</p> <p>Renamed from ShouldFlush to Permanent for more clarity, since 0.6.2!</p> <p>Tells Scene if object should get flushed, if value is set to false. Symbol is ignored if <code>ignoreShouldFlush</code> argument is set to true in Scene.Flush().</p> Example <pre><code>MyObject = {\n    [Symbols.ShouldFlush] = false\n}\n</code></pre> <pre><code>Scene.Flush()\n</code></pre> <p>From the example above, it can be observed that MyObject has not been flushed, since ShouldFlush and ignoreShouldFlush are set to false. Resulting in the object staying in the scene.</p> <p></p>"},{"location":"documentation/scene/#rigidbody","title":"Rigidbody","text":"<p> Since: 0.6.0  Parameter: Properties <code>{[String]: any}</code></p> <p>Adds Rigidbody properties to object. This symbol has only affect to those who are under the Type symbol configured to Rigidbody. The Object property is being handled automatically.</p> <p>Rigidbody properties of Nature2D</p> Example <pre><code>MyObject = {\n    [Symbols.Rigidbody] = {\n        Anchored = true\n    }\n}\n</code></pre> <p>From the example above, once the physics simulation has been started the object wont move.</p> <p></p>"},{"location":"documentation/scene/#linktag","title":"LinkTag","text":"<p> Since: 0.6.2  Parameter: Tag <code>String</code></p> <p>Adds a tag to object, which can be fetched using the LinkGet symbol.</p> Example <pre><code>MyObject = {\n    [Symbols.LinkTag] = \"Hello world!\"\n}\n</code></pre> <p></p>"},{"location":"documentation/scene/#linkget","title":"LinkGet","text":"<p> Since: 0.6.2  Parameter: Tag <code>String | { String }</code>  Parameter: Callback <code>(Object, ...) -&gt; ()</code></p> <p>Gets all of the objects with the specified tag. If the symbol has been applied during loading of the scene, the execution will be delayed until LoadFinished has been fired else, when ObjectAdded fires.</p> <p>Accepts an array of strings or a string as a parameter. If the given link name has more than one object tied to it, will return an array of the objects in the <code>Callback</code> function. Otherwise, the object itself will get returned.</p> Example <pre><code>MyObject = {\n    [Symbols.LinkTag] = \"Hello world!\"\n},\n\nNamedAfterMyobject = {\n    Name = \"Something totally different!\",\n\n    [Symbols.LinkGet({ \"Hello world!\" })] = function(thisObject, myObject: Frame)\n        thisObject.Name = myObject.Name\n    end\n}\n</code></pre> <p>From the example above, after the scene has finished loading <code>NamedAfterMyobject</code> will rename itself from \"Something totally different!\" to \"MyObject\".</p> <p></p>"},{"location":"documentation/scene/#class","title":"Class","text":"<p> Since: 0.6.2  Parameter: Type <code>String</code></p> <p>Tells the Compiler the class of the object (e.g. Frame). If not present, will default to <code>Frame</code>!</p> Example <pre><code>MyTextLabel = {\n    Text = \"Hello world!\",\n\n    [Symbols.Class] = \"TextLabel\"\n}\n</code></pre> <p></p>"},{"location":"documentation/scene/#children","title":"Children","text":"<p> Since: 0.6.2  Parameter: Children <code>Table</code></p> <p>Adds instances to the object, adding them to the scene and attaching symbols to them. Does not support the use of the Property symbol currently. The Type symbol can be used to specify the child instance's type.</p> Example <pre><code>MyContainer = {\n    MyRigidbody = {\n        [Symbols.Type] = \"Rigidbody\",\n\n        [Symbols.Children] = {\n            RoundedCorner = {\n                [Symbols.Class] = \"UICorner\"\n            }\n        }\n    }\n}\n</code></pre> <p>From the example above, a rigidbody gets created with an <code>UICorner</code> and gets parented to <code>MyContainer</code>.</p> <p></p>"},{"location":"documentation/scene/#isloading","title":"IsLoading","text":"<p> Warning: Deprecated since 0.6.2  Read-Only</p> <p>IsLoading is a simple property which tells if the compiler is busy or not working on a scene.</p> <p></p>"},{"location":"documentation/scene/#state","title":"State","text":"<p> Since: 0.6.2  Read-Only</p> <p>Replacement for IsLoading. Reports the current state of Scene:</p> <ul> <li>Loading</li> <li>Flushing</li> <li>Standby</li> </ul> <p></p>"},{"location":"documentation/scene/#events","title":"Events","text":"<p> Since: 0.5.3  Read-Only</p> <p>Events are simple ways to run certain behaviour at certain times.</p> <p>List of all available events</p> Name: Description: LoadStarted Fires before the scene gets loaded LoadFinished Fires after the scene got loaded FlushStarted Fires before the scene gets flushed/deleted FlushFinished Fires after the scene got flushed/deleted ObjectAdded Fires when an object got added to the scene, returns object ObjectRemoved Fires when an object got removed from the scene, returns object"},{"location":"documentation/scene/#api","title":"API","text":""},{"location":"documentation/scene/#loadscenedata","title":".Load(<code>sceneData</code>)","text":"<p> Since: 0.3.0  Parameter: sceneData <code>Dictionary</code></p> <p>Loads in a scene using the sceneData table. A name field must be provided, otherwise it will default to \"Unnamed scene\", which could cause unintended behaviours. The compiler does not check if a scene already exists with that name, meaning it will overwrite it. It is a good practice to have each container's type defined, even if it is supposed to be an <code>UIBase</code>! Otherwise, an error will be thrown!</p> <p>Fires LoadStarted and LoadFinished.</p> Example <pre><code>return {\n    Name = \"My scene\",\n\n    My_Container = {\n        [Type] = \"UIBase\",\n        [Property] = {\n            Transparency = 0.5\n            [Tag] = \"Container!\"\n        }\n\n        My_Object = {\n            AnchorPoint = Vector2.new(0.5, 0.5),\n            Position = UDim2.fromScale(0.5, 0.5),\n            Size = UDim2.fromOffset(100, 100),\n\n            [Tag] = \"Object!\"\n        }\n    },\n}\n</code></pre> <p>How a scene module is typically structured:</p> Level Name Description 0 Main body Defines the <code>Containers</code> as well as the <code>Name</code> 1 Containers Defines the <code>Type</code> of the objects and the <code>Properties</code> that objects may share 2 Objects Defines object properties and their symbols based on previous <code>Property</code> symbols present in <code>Containers</code> and the data inside the table itself <p>Objects always have higher priority when applying properties.</p> <p></p>"},{"location":"documentation/scene/#addobject-symbols","title":".Add(<code>object</code>, <code>symbols</code>)","text":"<p> Since: 0.5.3  Parameter: object <code>GuiObject | Rigidbody</code>  Parameter: symbols <code>{[Symbol]: Any}</code></p> <p>Internally used by scene when the compiler has finished gathering and building up the  objects in the scene. Sets up a cleanup method for the object, creates a new entry  in the sceneObjects array saving an <code>ObjectReference</code> table associated with the object and calls Scene.AddSymbols().</p> <p>Fires ObjectAdded.</p> <pre><code>type ObjectReference = {\n    Object: GuiObject | Rigidbody,\n    Janitor: Janitor,\n    SymbolJanitor: Janitor,\n    ID: string,\n    Symbols: {\n        IDs: { UUID }?,\n        Permanent: boolean?,\n        LinkIDs: { string }?,\n    },\n}\n</code></pre> <p></p>"},{"location":"documentation/scene/#addsymbolsobject-symbols","title":".AddSymbols(<code>object</code>, <code>symbols</code>)","text":"<p> Since: 0.6.0  Parameter: object <code>GuiObject | Rigidbody</code>  Parameter: symbols <code>{[Symbol]: Any}</code></p> <p>Attaches symbols to an object. Used by Scene.Add(). Does not support custom objects, due to symbols need to have the reference to  the object to access data such as the object's Janitor.</p> <p></p>"},{"location":"documentation/scene/#removeobject-stripsymbols","title":".Remove(<code>object</code>, <code>stripSymbols</code>)","text":"<p> Since: 0.6.0  Parameter: object <code>GuiObject | Rigidbody</code>  Parameter: stripSymbols <code>Boolean</code>  Default: stripSymbols <code>False</code></p> <p>Removes the object from the scene without destroying it nor cleaning up the Janitor. If stripSymbols is set to true it will cleanup the symbols.</p> <p>Fires ObjectRemoved.</p> <p></p>"},{"location":"documentation/scene/#cleanupobject","title":".Cleanup(<code>object</code>)","text":"<p> Since: 0.6.2  Parameter: object <code>GuiObject | Rigidbody</code></p> <p>Cleans up the provided object.</p> <p></p>"},{"location":"documentation/scene/#flushignorepermanent","title":".Flush(<code>ignorePermanent</code>)","text":"<p> Since: 0.5.3  Parameter: ignorePermanent <code>Boolean</code>  Default: ignorePermanent <code>False</code></p> <p>Cleans up all of the objects in the scene if called. If ignorePermanent is set to true Scene will ignore objects which have the Permanent symbol attached with the value of true.</p> <p></p>"},{"location":"documentation/scene/#registercustomsymbolname-returnkind-controller","title":".RegisterCustomSymbol(<code>name</code>, <code>returnKind</code>, <code>controller</code>)","text":"<p> Since: 0.6.2  Parameter: name <code>String</code>  Parameter: returnKind <code>Number</code>  Parameter: controller <code>(object, symbol) -&gt; ()</code></p> <p>Registers a new custom symbol handler. The returnKind parameter accepts:</p> <ul> <li>0 - Returns the symbol</li> <li>1 - Returns a function, when called returns the symbol</li> </ul> <p>Example</p> <p>This example prints the object's ID and the attached value of the symbol.</p> <pre><code>Scene.RegisterCustomSymbol(\"testSymbol\", 0, function(object, symbol)\n    print(object.ID, symbol.SymbolData.Attached)\nend)\n</code></pre> <p></p>"},{"location":"documentation/scene/#getfromtagtag","title":".GetFromTag(<code>tag</code>)","text":"<p> Since: 0.6.0  Parameter: tag <code>String</code>  Returns: Objects <code>{[Number]: GuiBase2d | Types.Rigidbody}</code></p> <p>Returns all of the objects with the specified tag.</p> <p></p>"},{"location":"documentation/scene/#isrigidbodyobject","title":".IsRigidbody(<code>object</code>)","text":"<p> Since: 0.6.0  Parameter: object <code>GuiObject | Rigidbody</code>  Returns: Result <code>Boolean</code></p> <p>Returns a boolean to indicate if object is a rigidbody or not.</p> <p></p>"},{"location":"documentation/scene/#getobjectreferenceobject","title":".GetObjectReference(<code>object</code>)","text":"<p> Since: 0.6.0  Parameter: object <code>GuiObject | Rigidbody</code>  Returns: Reference <code>ObjectReference</code></p> <p>Returns the object's ObjectReference table used by Scene.</p> <p>Useful to add custom events or logic to the object and making it sure that, that event/logic gets disconnected upon the destruction of the object.</p> <p>Internally used by Scene.AddSymbols().</p> <p></p>"},{"location":"documentation/scene/#getobjects","title":".GetObjects()","text":"<p> Since: 0.5.3  Returns: Objects <code>{ [Types.UUID]: ObjectReference }</code></p> <p>Returns all of the objects wihin scene containing all of the <code>ObjectReferences</code>.</p>"},{"location":"documentation/settings/","title":"Settings","text":"<p>Settings is a module made to put every configurable setting into one place. These settings get applied at the start of the engine.</p> <p>Every setting is categorized, depending on what purpose they have.</p>"},{"location":"documentation/settings/#rendering","title":"Rendering","text":"<p>In this category there are settings related to Rendering. Such as optimizing the rendering of UI elements by culling them, disabling character loading or disabling 3D rendering.</p>"},{"location":"documentation/settings/#disable3drendering","title":"Disable3DRendering","text":"<p> Since: 0.6.0  Default: Disable3DRendering <code>true</code></p> <p>Disables 3D rendering by</p> <ul> <li>Setting the camera FOV to 1</li> <li>Setting the camera type to scriptable</li> <li>Setting the camera's CFrame to 0</li> </ul> <p></p>"},{"location":"documentation/settings/#disableplayercharacters","title":"DisablePlayerCharacters","text":"<p> Since: 0.5.3  Default: DisablePlayerCharacters <code>true</code></p> <p>This setting disables the player characters, by deleting them locally.</p> <p></p>"},{"location":"documentation/settings/#optimizelighting","title":"OptimizeLighting","text":"<p> Since: 0.6.0  Default: OptimizeLighting <code>true</code></p> <p>Optimizes lighting by</p> <ul> <li>Ambient, ColorShift_Bottom, ColorShift_Top, OutdoorAmbient, FogColor to black</li> <li>Brightness to 0</li> <li>GlobalShadows to false</li> <li>ClockTime to 4</li> <li>GeographicLatitude to 0</li> </ul> <p></p>"},{"location":"documentation/settings/#enablecoreguis","title":"EnableCoreGuis","text":"<p> Since: 0.5.3</p> <p>This setting is used to enable/disable core guis, to free up space or remove unnecessary features. Such as chat, player list or the emotes menu.</p> <p>Default values</p> <ul> <li>EmotesMenu (default: <code>false</code>)</li> <li>PlayerList (default: <code>false</code>)</li> <li>Backpack (default: <code>false</code>)</li> <li>Health (default: <code>false</code>)</li> <li>Chat (default: <code>false</code>)</li> </ul> <p></p>"},{"location":"documentation/settings/#prototypes","title":"Prototypes","text":"<p>Prototypes are settings that are work in progress, unstable or unoptimized. These settings are recommended to be kept at their default state.</p> <p>List of prototypes present in Rendering</p> <ul> <li>CullGuiElements (default: <code>false</code>)<ul> <li>Culls out gui elements that are behind each other or out of the screen boundaries</li> <li>Status: Unoptimized, at 2000 objects game lagged at unplayable rate every time an  object moved or scene was loaded</li> </ul> </li> </ul>"},{"location":"documentation/settings/#pool","title":"Pool","text":""},{"location":"documentation/settings/#initialcache","title":"InitialCache","text":"<p> Since: 0.6.0</p> <p>This setting is used to determine how many should be created for each class present in the table.</p> <p>Default values</p> <ul> <li>ImageLabel (default: <code>100</code>)</li> <li>TextLabel (default: <code>100</code>)</li> <li>TextButton (default: <code>50</code>)</li> <li>ImageButton (default: <code>50</code>)</li> <li>TextBox (default: <code>50</code>)</li> <li>ScrollingFrame (default: <code>5</code>)</li> <li>ViewportFrame (default: <code>5</code>)</li> <li>Frame (default: <code>100</code>)</li> </ul> <p></p>"},{"location":"documentation/settings/#extensionsize","title":"ExtensionSize","text":"<p> Since: 0.6.0  Default: ExtensionSize <code>10</code></p> <p>Used when the pool runs out of the specified object. This setting determines how many should get created to fill up the pool.</p>"},{"location":"documentation/settings/#physics","title":"Physics","text":""},{"location":"documentation/settings/#nature2dquadtreesenabled","title":"Nature2D.QuadTreesEnabled","text":"<p> Since: 0.6.0  Default: QuadTreesEnabled <code>true</code></p> <p>Optimization regarding looking up rigidbodies in Nature2D</p> <p></p>"},{"location":"documentation/settings/#nature2dcollisioniteration","title":"Nature2D.CollisionIteration","text":"<p> Since: 0.6.0  Default: CollisionIteration <code>4</code></p> <p>How accure the collision detection should be.</p> <p>Warning</p> <p>Higher values result in better collision detection, but at the price of performance! The default value is recommened by Nature2D</p> <p></p>"},{"location":"documentation/settings/#nature2dconstraintiteration","title":"Nature2D.ConstraintIteration","text":"<p> Since: 0.6.0  Default: CollisionIteration <code>3</code></p> <p>How accure the contraints should be.</p> <p>Warning</p> <p>Higher values result in better contraints detection, but at the price of performance! The default value is recommened by Nature2D</p>"},{"location":"documentation/settings/#console","title":"Console","text":""},{"location":"documentation/settings/#logheader","title":"LogHeader","text":"<p> Since: 0.6.0  Default: LogHeader <code>true</code></p> <p>Determines if Rethink shoukd print it's header into the console.</p> <p></p>"},{"location":"documentation/settings/#logonpropertyfail","title":"LogOnPropertyFail","text":"<p> Since: 0.6.0  Default: LogOnPropertyFail <code>True</code></p> <p>Determines if the Compiler should notify in the console, if an unprocessable property was found.</p>"},{"location":"documentation/settings/#uncategorized","title":"Uncategorized","text":""},{"location":"documentation/settings/#compilerchunksize","title":"CompilerChunkSize","text":"<p> Warning: Deprecated since 0.6.2  Since: 0.6.0  Default: CompilerChunkSize <code>100</code></p> <p>How big should a chunk be, when using TaskDistributor.GenerateChunk(). This setting is used in the Compiler.</p> <p></p>"},{"location":"documentation/settings/#viewportcolor","title":"ViewportColor","text":"<p> Since: 0.6.0  Default: ViewportColor <code>R: 35, R: 68, B: 139</code></p> <p>The color of the viewport.</p>"},{"location":"documentation/taskdistributor/","title":"Taskdistributor","text":"<p>TaskDistributor is a module created for handling tasks in a large scale. This module is mainly used in Scene. For instance to handle the creation of thousans of objects or to flush them.</p>"},{"location":"documentation/taskdistributor/#api","title":"API","text":""},{"location":"documentation/taskdistributor/#taskdistributornew","title":"TaskDistributor.new()","text":"<p>Constructs a new TaskDistributor class.</p> <p></p>"},{"location":"documentation/taskdistributor/#taskdistributorgeneratechunkdata-chunksize","title":"TaskDistributor.GenerateChunk(<code>data</code>, <code>chunkSize</code>)","text":"<p> Parameter: data <code>{[Any]: Any}</code>  Parameter: chunkSize <code>Number</code>  Returns: chunkData <code>CachedChunk</code></p> <p>Splits up the data table into smaller chunks based on the chunkSize argument and  than returns it in the form of a CachedChunk object.</p> <pre><code>type CachedChunk = {\n    Chunk: { [ number ]: { [ number ]: any } },\n    DataSize: number,\n}\n</code></pre> Example <pre><code>local TaskDistributor = require(PATH.TO.MODULE)\n\n-- This will split up a table that has 100 objects into tables of 10\nlocal chunk = TaskDistributor.GenerateChunk(table.create(100, Instance.new(\"Part\", game.Lighting)), 10)\n\nprint(chunk)\n</code></pre> <p>The example above creates a table with an index of 100, which holds instances parented to Lighting and splits it up based on <code>CHUNK_SIZE</code>. Printing out the table results in having 10 tables, which hold 10 objects.</p> <p></p>"},{"location":"documentation/taskdistributor/#taskdistributordistributechunkdata-processor-promise","title":"TaskDistributor:Distribute(<code>chunkData</code>, <code>processor</code>): <code>Promise</code>","text":"<p> Parameter: chunkData <code>CachedChunk</code>  Parameter: processor <code>(Object) -&gt; ()</code>  Returns: Promise <code>Promise</code></p> <p>Distributes the chunkData among multiple promise instances and by each iteration the object gets fed to the processor function.</p> <p>Processor</p> <p>The processor function should always accept as the first argument the objects themselves. Check below for an example of an example of how the function should look like!</p> <p>Warning</p> <p>It is generally a good practice to attach <code>:await</code> aftter the <code>:Distribute</code> function, because in default ROBLOX would not wait for the function to finish, because Promise by default makes the attached function asynchronous.</p> <p>If the asynchronous behaviour is desired to be kept, a recommended way to still know when it finished is by attaching <code>:andThen(function() end)</code> to your code!</p> <p>It is recommended to check out the documentation of Promise!</p> Example <pre><code>local TaskDistributor = require(PATH.TO.MODULE)\n\nlocal chunk = TaskDistributor.GenerateChunk(table.create(100, Instance.new(\"Part\", game.Lighting)), 10)\n\nTaskDistributor:Distribute(chunk, function(object)\n    -- In this function we can put any code that is related to the object\n    -- For example renaming each part and moving them to workspace\n    object.Name = \"Hello TaskDistributor!\"\n    object.Parent = workspace\nend):await()\n\nprint(\"Done processing!\")\n</code></pre> <p>The example above extends on the previous example, where the data was split up. This time however, the chunk is processed using TaskDistributor:Distribute().</p>"},{"location":"documentation/template/","title":"Template","text":"<p>Template is an utility module, which can save any kind of value to be retrieved later. In Rethink this tool is mainly used to pass on classes to avoid any infinite recursion errors.</p> <p></p>"},{"location":"documentation/template/#api","title":"API","text":""},{"location":"documentation/template/#newglobalglobalname-element-islocked","title":".NewGlobal(<code>globalName</code>, <code>element</code>, <code>isLocked</code>)","text":"<p> Parameter: globalName <code>String</code>  Parameter: element <code>Any</code>  Parameter: isLocked <code>Boolean</code></p> <p>Saves the element in a table with a key of globalName. isLocked argument prevents it from being overwritten.</p> <p></p>"},{"location":"documentation/template/#fetchglobaltarget","title":".FetchGlobal(<code>target</code>)","text":"<p> Parameter: target <code>String</code>  Returns: Element <code>Any</code></p> <p>Returns the global with the key of target.</p> <p></p>"},{"location":"documentation/template/#updateglobaltarget-element","title":".UpdateGlobal(<code>target</code>, <code>element</code>)","text":"<p> Parameter: target <code>String</code>  Parameter: element <code>Any</code></p> <p>Updates the global value with the key of target to element.</p> <p></p>"},{"location":"documentation/template/#newelement-islocked","title":".new(<code>element</code>, <code>isLocked</code>)","text":"<p> Parameter: element <code>Any</code>  Parameter: isLocked <code>Boolean</code></p> <p>Constructs a new class with element. If isLocked is set to true Template:Update() calls will be ignored.</p> <p></p>"},{"location":"documentation/template/#fetch","title":":Fetch()","text":"<p> Returns: Element <code>Any</code></p> <p>Returns the class' element. If the saved element is an instance, the duplicated version will be fetched.</p> <p></p>"},{"location":"documentation/template/#updateelement","title":":Update(<code>element</code>)","text":"<p> Parameter: element <code>Any</code></p> <p>Updates the class' element to element. If isLocked is set to true the request will get ignored.</p> <p></p>"},{"location":"documentation/template/#destroy","title":":Destroy()","text":"<p>Destructs the class.</p>"},{"location":"getstarted/changelog/","title":"Changelog","text":""},{"location":"getstarted/changelog/#update-070","title":"Update: 0.7.0","text":"<ul> <li>Fix <code>Animator</code>'s type checking</li> <li>Add <code>Sound</code> to modules</li> <li>Add settings regarding <code>Sound</code></li> </ul>"},{"location":"getstarted/changelog/#update-062","title":"Update: 0.6.2","text":"<ul> <li>Removed debug prints left in on accident</li> <li>Rename type <code>UiBase</code> to <code>UIBase</code></li> <li>Documentation site improvements</li> <li>Removed support of the <code>Type</code> symbol having aliases</li> <li>Added <code>Symbols.RegisterCustomSymbol()</code> function to create custom symbols more easily</li> <li>Added wrapper function in Scene for <code>Symbols.RegisterCustomSymbol()</code></li> <li>Fixed spelling mistakes</li> <li>Removed deprecated RDC runner script</li> <li>Fixed Rethink throwing errors if <code>Rethink.GetModules()</code> was called before it's initialized</li> <li>Updated warnings in Template, Scene</li> <li>Added <code>Scene.Cleanup()</code></li> <li>Fixed bug relating to Pool not returning the correct object</li> <li>Moved <code>Scene.Events.ObjectRemoved</code> invoking to object's cleanup method</li> <li>Replaced .IsLoading to .State to indicate the states that scene is in, such as: Loading, Flushing, Standby</li> <li>Removed Scene throwing a warning in <code>.Flush()</code> was called, when the scene is empty</li> <li>Added <code>LinkTag</code> and <code>LinkGet</code> symbols to reference other objects in the scene module</li> <li>Cleaned up Symbols module, separation of each handler into its own module</li> <li>Updates docs of <code>Scene</code> to match current state</li> <li>Scene no longer returns a Promise when <code>.Load</code> is called</li> <li>Renamed back 3rd party modules to their original names</li> <li>Renamed Animation back to Animator</li> <li>Fixed error regarding not formatting objects correctly when throwing errors</li> <li>Scene now exports <code>ObjectReference</code> type</li> <li>Removed SelfView, CompilerChunkSize from settings</li> <li>Added Class symbol to define object ClassNames</li> <li>Utilize gitmodules to track third party libraries</li> <li>Symbols now return <code>visual object</code>s (e.g. Frame)</li> <li>Object's reference table is now initially set up with symbol handling</li> <li>Rewritten <code>Scene.Remove()</code> to use <code>Scene.GetObjectReference()</code> internally</li> <li>Rewritten <code>Scene.Flush()</code>, <code>Scene.Load()</code> to stop using <code>TaskDistributor</code></li> <li>Use promise in symbol handlers to catch warnings to prevent code halting</li> <li>Fixed memory-leak when removing objects using <code>Scene.Remove()</code></li> <li>Removed <code>TaskDistributor</code></li> <li>Renamed ShouldFlush to Permanent</li> <li>Built-in symbols now do type-checking</li> <li>Reworked messages and logging using <code>Log</code> library</li> <li>Add missing documentation for the main module (init.lua)</li> <li>Fixed inconsistencies with types not being capitalized sometimes</li> <li>Add <code>Children</code> symbol</li> <li>Make <code>ObjectPool</code> create new instances if the specified kind does not exist</li> <li><code>ObjectPool</code> now only resets objects that are <code>GuiBase2d</code></li> </ul>"},{"location":"getstarted/changelog/#update-061","title":"Update: 0.6.1","text":"<ul> <li>Fixed objects not being removed completely</li> <li>Rewritten ObjectPool</li> <li>Added new argument <code>stripSymbols</code> to <code>.Remove</code></li> <li>Symbols are now being tracked with their own IDs</li> <li>Symbols have their own Janitor now</li> <li>Fixed documentation</li> <li>Symbols now use <code>.Symbols</code> table to store data instead of using the object's reference table directly</li> <li>Fixed symbols staying on objects after flushed or removed</li> <li>Added <code>.Init</code> and <code>.GetModules</code> function to Rethink</li> <li>Restructure of engine internals</li> </ul>"},{"location":"getstarted/changelog/#update-060","title":"Update: 0.6.0","text":"<ul> <li>Added aliases to the Type symbol:<ul> <li>Layer <code>UiBase</code></li> <li>Static <code>UiBase</code></li> <li>Dynamic <code>Rigidbody</code></li> </ul> </li> <li>Deployed documentation</li> <li>Added pin_game.md to request your game getting pinned on the landing page as an example</li> <li>Introduced TaskDistributor</li> <li>Optimized Scene <code>Flush</code> and <code>Load</code></li> <li>Refactoring, as well as removing <code>Utils</code></li> <li>Fix <code>Physics</code> now automatically rescaling canvas, if viewport's size changed</li> <li>Simplifed UI hierarchy<ul> <li>GameFrame</li> <li>RenderFrame</li> <li>Viewport</li> <li>Ui</li> </ul> </li> <li>Introduced UiPool to try and minimize the rapid creation and deletion of objects</li> <li>Introduced Settings, where you can customize features to your likings</li> <li>Introduced <code>Prototypes</code>, that can be accessed with <code>Rethink.Prototypes</code></li> <li>Now <code>Components</code> and <code>Tools</code> can be accessed with Rethink for quality-of-life</li> <li>Optimizations regarding <code>Rendering</code></li> <li>Prototype <code>Culling</code> feature, to attempt to optimize heavy object scenarios</li> <li>Restructured code into three different categories:<ul> <li>Core: The main deal of Rethink, modules made by me and are necessary</li> <li>Environment: Modules created by <code>jaipack17</code> regarding physics and collisions</li> <li>Utility: Smaller modules that are expected to be used less often than <code>Core</code> ones</li> </ul> </li> <li>Introduced <code>Animation</code> a new animation module for <code>Spritesheets</code> and <code>Set of images</code></li> <li>Removed being able to use custom <code>Protocol</code> modules, due to it just adding more complexity</li> <li>Made <code>Scene.GetBodyFromTag</code> into a single function</li> <li>Introduced Symbols that can be used in <code>Scene files</code><ul> <li>Tag: Gives the given object a <code>tag(s)</code> fetch it with <code>CollectionService</code> or <code>Scene:GetRigidbodyFromTag</code></li> <li>Property: Applies <code>properties</code> or <code>symbols</code> to objects in the <code>group</code> or the <code>container</code></li> <li>Type: How the compiler handles the object <code>UiBase</code> and <code>Rigidbody</code></li> <li>Children: Add objects that are parented to the given object</li> <li>Event: Hook events to the given object</li> <li>DAF: Determines if the object will get deleted on <code>.Flush()</code> (Delete After Flush)</li> <li>Rigidbody: Add rigidbody properties that later get fed into the Physics engine</li> </ul> </li> <li>Switched from using <code>Wrapper</code> to instead using <code>Template</code> to pass on classes</li> <li>Replaced <code>:</code> with <code>.</code> where <code>Wrapper</code> was used</li> <li>Added documentation for functions (as well as JSDoc here and there)</li> <li>Added <code>Scene.IsRigidbody</code> for identifying rigidbodies easier</li> <li>Added <code>Default properties</code> to objects when compiling objects</li> <li>Introduced <code>Template</code>, a simple global data holder</li> <li>Removed <code>ReadOnly</code></li> <li>Added <code>Strings</code> for editing throw messages, header easier</li> <li>Cleaned up <code>GenerateGUI</code></li> <li>A Dev place has been made available to see my progress on the engine Click here to view!</li> <li>Introduced <code>TypeCheck</code></li> <li>Lot of code refactoring</li> <li>Unit test for <code>TaskDistributor</code></li> <li>Removed the <code>Input</code> library</li> <li>Created new logo for Rethink</li> <li>Added github issue templates</li> <li>Moved actual engine code into <code>src</code></li> </ul> <p>For upcoming updates:</p> <ul> <li>Add Rethink to <code>Wally</code></li> <li>Create a lite version of Rethink</li> <li>Finish development of RePreview</li> <li>Create an example game</li> <li>Update GitHub page more frequently :)</li> </ul>"},{"location":"getstarted/changelog/#update-053","title":"Update: 0.5.3","text":"<ul> <li>Updated physics (Nature2D) to V: 0.6.0</li> <li>Added scene:GetRigidbodyFromTag() and scene:GetRigidbodiesFromTag()</li> <li>idk</li> </ul>"},{"location":"getstarted/changelog/#update-052","title":"Update: 0.5.2","text":"<ul> <li>Updated physics (Nature2D) to V: 0.5.4</li> <li>Added <code>Outline</code></li> <li>Reverted function's first letter to lowercase</li> <li>Added <code>Gamepad</code> to inputs</li> <li>Added <code>fixedRot</code> and <code>fixedPos</code> to rigidbodies</li> </ul>"},{"location":"getstarted/changelog/#update-041","title":"Update: 0.4.1","text":"<ul> <li>Made functions' first letter uppercase and the rest lowercase</li> <li>Made module names more consistent with eachother</li> </ul>"},{"location":"getstarted/changelog/#update-040","title":"Update: 0.4.0","text":"<ul> <li>Added <code>current</code> to inputs</li> <li>Added <code>Template</code> to tools</li> </ul>"},{"location":"getstarted/changelog/#update-030","title":"Update: 0.3.0","text":"<ul> <li>Added scene manager</li> <li>Added test folder</li> </ul>"},{"location":"getstarted/changelog/#update-020","title":"Update: 0.2.0","text":"<ul> <li>Added utility functions for rigid bodies</li> </ul>"},{"location":"getstarted/changelog/#update-010","title":"Update: 0.1.0","text":"<ul> <li>Inital release</li> </ul>"},{"location":"getstarted/installation/","title":"Installation","text":"<p>Here are three ways how you can install Rethink:</p> <p>Warning</p> <p>Rethink is still in the alpha release! Expect engine breaking bugs. In case of encountering a bug, feel free to create an issue on the GitHub page!</p> <p>Wally</p> <p>In the future I plan on adding Rethink to wally for easier access.</p> 1. From roblox <p>This is probably the most easiest way to get Rethink into your game! Click here!</p> <p>Steps</p> <ol> <li>Grab the model here!</li> <li>In roblox studio open up the library</li> <li>Go to your inventory and search for Rethink</li> <li>Insert Rethink into your game and preferably move it to <code>ReplicatedStorage</code></li> </ol> 2. With git <p>Using git simply run the following command in the command line that will clone the repository <pre><code>git clone --recurse-submodules https://github.com/jammees/Rethink-Engine.git\n</code></pre></p> 3. Downloading the source code on github <p>You can download the source code and precompiled module from the releases tab! </p> <p>Steps</p> <ol> <li>Go to the repository</li> <li>Click on <code>code</code> and click on download ZIP</li> <li>Extract the src folder into your game folder and rename it to <code>Rethink</code></li> <li>Sync it into your game with Rojo or any plugin that connects VSC to Roblox Studio</li> </ol>"}]}